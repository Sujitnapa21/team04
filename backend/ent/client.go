// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/B6001186/Contagions/ent/migrate"

	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/bloodtype"
	"github.com/B6001186/Contagions/ent/category"
	"github.com/B6001186/Contagions/ent/department"
	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/diseasetype"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/drugtype"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/gender"
	"github.com/B6001186/Contagions/ent/level"
	"github.com/B6001186/Contagions/ent/nametitle"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/B6001186/Contagions/ent/place"
	"github.com/B6001186/Contagions/ent/severity"
	"github.com/B6001186/Contagions/ent/statistic"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Area is the client for interacting with the Area builders.
	Area *AreaClient
	// Bloodtype is the client for interacting with the Bloodtype builders.
	Bloodtype *BloodtypeClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Diagnosis is the client for interacting with the Diagnosis builders.
	Diagnosis *DiagnosisClient
	// Disease is the client for interacting with the Disease builders.
	Disease *DiseaseClient
	// Diseasetype is the client for interacting with the Diseasetype builders.
	Diseasetype *DiseasetypeClient
	// Drug is the client for interacting with the Drug builders.
	Drug *DrugClient
	// DrugType is the client for interacting with the DrugType builders.
	DrugType *DrugTypeClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Level is the client for interacting with the Level builders.
	Level *LevelClient
	// Nametitle is the client for interacting with the Nametitle builders.
	Nametitle *NametitleClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Place is the client for interacting with the Place builders.
	Place *PlaceClient
	// Severity is the client for interacting with the Severity builders.
	Severity *SeverityClient
	// Statistic is the client for interacting with the Statistic builders.
	Statistic *StatisticClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Area = NewAreaClient(c.config)
	c.Bloodtype = NewBloodtypeClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Diagnosis = NewDiagnosisClient(c.config)
	c.Disease = NewDiseaseClient(c.config)
	c.Diseasetype = NewDiseasetypeClient(c.config)
	c.Drug = NewDrugClient(c.config)
	c.DrugType = NewDrugTypeClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Gender = NewGenderClient(c.config)
	c.Level = NewLevelClient(c.config)
	c.Nametitle = NewNametitleClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Place = NewPlaceClient(c.config)
	c.Severity = NewSeverityClient(c.config)
	c.Statistic = NewStatisticClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Area:        NewAreaClient(cfg),
		Bloodtype:   NewBloodtypeClient(cfg),
		Category:    NewCategoryClient(cfg),
		Department:  NewDepartmentClient(cfg),
		Diagnosis:   NewDiagnosisClient(cfg),
		Disease:     NewDiseaseClient(cfg),
		Diseasetype: NewDiseasetypeClient(cfg),
		Drug:        NewDrugClient(cfg),
		DrugType:    NewDrugTypeClient(cfg),
		Employee:    NewEmployeeClient(cfg),
		Gender:      NewGenderClient(cfg),
		Level:       NewLevelClient(cfg),
		Nametitle:   NewNametitleClient(cfg),
		Patient:     NewPatientClient(cfg),
		Place:       NewPlaceClient(cfg),
		Severity:    NewSeverityClient(cfg),
		Statistic:   NewStatisticClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:      cfg,
		Area:        NewAreaClient(cfg),
		Bloodtype:   NewBloodtypeClient(cfg),
		Category:    NewCategoryClient(cfg),
		Department:  NewDepartmentClient(cfg),
		Diagnosis:   NewDiagnosisClient(cfg),
		Disease:     NewDiseaseClient(cfg),
		Diseasetype: NewDiseasetypeClient(cfg),
		Drug:        NewDrugClient(cfg),
		DrugType:    NewDrugTypeClient(cfg),
		Employee:    NewEmployeeClient(cfg),
		Gender:      NewGenderClient(cfg),
		Level:       NewLevelClient(cfg),
		Nametitle:   NewNametitleClient(cfg),
		Patient:     NewPatientClient(cfg),
		Place:       NewPlaceClient(cfg),
		Severity:    NewSeverityClient(cfg),
		Statistic:   NewStatisticClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Area.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Area.Use(hooks...)
	c.Bloodtype.Use(hooks...)
	c.Category.Use(hooks...)
	c.Department.Use(hooks...)
	c.Diagnosis.Use(hooks...)
	c.Disease.Use(hooks...)
	c.Diseasetype.Use(hooks...)
	c.Drug.Use(hooks...)
	c.DrugType.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Gender.Use(hooks...)
	c.Level.Use(hooks...)
	c.Nametitle.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Place.Use(hooks...)
	c.Severity.Use(hooks...)
	c.Statistic.Use(hooks...)
}

// AreaClient is a client for the Area schema.
type AreaClient struct {
	config
}

// NewAreaClient returns a client for the Area from the given config.
func NewAreaClient(c config) *AreaClient {
	return &AreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `area.Hooks(f(g(h())))`.
func (c *AreaClient) Use(hooks ...Hook) {
	c.hooks.Area = append(c.hooks.Area, hooks...)
}

// Create returns a create builder for Area.
func (c *AreaClient) Create() *AreaCreate {
	mutation := newAreaMutation(c.config, OpCreate)
	return &AreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Area.
func (c *AreaClient) Update() *AreaUpdate {
	mutation := newAreaMutation(c.config, OpUpdate)
	return &AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaClient) UpdateOne(a *Area) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withArea(a))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaClient) UpdateOneID(id int) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withAreaID(id))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Area.
func (c *AreaClient) Delete() *AreaDelete {
	mutation := newAreaMutation(c.config, OpDelete)
	return &AreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AreaClient) DeleteOne(a *Area) *AreaDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AreaClient) DeleteOneID(id int) *AreaDeleteOne {
	builder := c.Delete().Where(area.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaDeleteOne{builder}
}

// Create returns a query builder for Area.
func (c *AreaClient) Query() *AreaQuery {
	return &AreaQuery{config: c.config}
}

// Get returns a Area entity by its id.
func (c *AreaClient) Get(ctx context.Context, id int) (*Area, error) {
	return c.Query().Where(area.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaClient) GetX(ctx context.Context, id int) *Area {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryDisease queries the disease edge of a Area.
func (c *AreaClient) QueryDisease(a *Area) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.DiseaseTable, area.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatistic queries the statistic edge of a Area.
func (c *AreaClient) QueryStatistic(a *Area) *StatisticQuery {
	query := &StatisticQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.StatisticTable, area.StatisticColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLevel queries the level edge of a Area.
func (c *AreaClient) QueryLevel(a *Area) *LevelQuery {
	query := &LevelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(level.Table, level.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.LevelTable, area.LevelColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Area.
func (c *AreaClient) QueryEmployee(a *Area) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.EmployeeTable, area.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaClient) Hooks() []Hook {
	return c.hooks.Area
}

// BloodtypeClient is a client for the Bloodtype schema.
type BloodtypeClient struct {
	config
}

// NewBloodtypeClient returns a client for the Bloodtype from the given config.
func NewBloodtypeClient(c config) *BloodtypeClient {
	return &BloodtypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bloodtype.Hooks(f(g(h())))`.
func (c *BloodtypeClient) Use(hooks ...Hook) {
	c.hooks.Bloodtype = append(c.hooks.Bloodtype, hooks...)
}

// Create returns a create builder for Bloodtype.
func (c *BloodtypeClient) Create() *BloodtypeCreate {
	mutation := newBloodtypeMutation(c.config, OpCreate)
	return &BloodtypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bloodtype.
func (c *BloodtypeClient) Update() *BloodtypeUpdate {
	mutation := newBloodtypeMutation(c.config, OpUpdate)
	return &BloodtypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BloodtypeClient) UpdateOne(b *Bloodtype) *BloodtypeUpdateOne {
	mutation := newBloodtypeMutation(c.config, OpUpdateOne, withBloodtype(b))
	return &BloodtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BloodtypeClient) UpdateOneID(id int) *BloodtypeUpdateOne {
	mutation := newBloodtypeMutation(c.config, OpUpdateOne, withBloodtypeID(id))
	return &BloodtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bloodtype.
func (c *BloodtypeClient) Delete() *BloodtypeDelete {
	mutation := newBloodtypeMutation(c.config, OpDelete)
	return &BloodtypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BloodtypeClient) DeleteOne(b *Bloodtype) *BloodtypeDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BloodtypeClient) DeleteOneID(id int) *BloodtypeDeleteOne {
	builder := c.Delete().Where(bloodtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BloodtypeDeleteOne{builder}
}

// Create returns a query builder for Bloodtype.
func (c *BloodtypeClient) Query() *BloodtypeQuery {
	return &BloodtypeQuery{config: c.config}
}

// Get returns a Bloodtype entity by its id.
func (c *BloodtypeClient) Get(ctx context.Context, id int) (*Bloodtype, error) {
	return c.Query().Where(bloodtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BloodtypeClient) GetX(ctx context.Context, id int) *Bloodtype {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryPatient queries the patient edge of a Bloodtype.
func (c *BloodtypeClient) QueryPatient(b *Bloodtype) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bloodtype.Table, bloodtype.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bloodtype.PatientTable, bloodtype.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BloodtypeClient) Hooks() []Hook {
	return c.hooks.Bloodtype
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Create returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{config: c.config}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryPatient queries the patient edge of a Category.
func (c *CategoryClient) QueryPatient(ca *Category) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.PatientTable, category.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryEmployee queries the employee edge of a Department.
func (c *DepartmentClient) QueryEmployee(d *Department) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.EmployeeTable, department.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// DiagnosisClient is a client for the Diagnosis schema.
type DiagnosisClient struct {
	config
}

// NewDiagnosisClient returns a client for the Diagnosis from the given config.
func NewDiagnosisClient(c config) *DiagnosisClient {
	return &DiagnosisClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `diagnosis.Hooks(f(g(h())))`.
func (c *DiagnosisClient) Use(hooks ...Hook) {
	c.hooks.Diagnosis = append(c.hooks.Diagnosis, hooks...)
}

// Create returns a create builder for Diagnosis.
func (c *DiagnosisClient) Create() *DiagnosisCreate {
	mutation := newDiagnosisMutation(c.config, OpCreate)
	return &DiagnosisCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Diagnosis.
func (c *DiagnosisClient) Update() *DiagnosisUpdate {
	mutation := newDiagnosisMutation(c.config, OpUpdate)
	return &DiagnosisUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiagnosisClient) UpdateOne(d *Diagnosis) *DiagnosisUpdateOne {
	mutation := newDiagnosisMutation(c.config, OpUpdateOne, withDiagnosis(d))
	return &DiagnosisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiagnosisClient) UpdateOneID(id int) *DiagnosisUpdateOne {
	mutation := newDiagnosisMutation(c.config, OpUpdateOne, withDiagnosisID(id))
	return &DiagnosisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Diagnosis.
func (c *DiagnosisClient) Delete() *DiagnosisDelete {
	mutation := newDiagnosisMutation(c.config, OpDelete)
	return &DiagnosisDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiagnosisClient) DeleteOne(d *Diagnosis) *DiagnosisDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiagnosisClient) DeleteOneID(id int) *DiagnosisDeleteOne {
	builder := c.Delete().Where(diagnosis.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiagnosisDeleteOne{builder}
}

// Create returns a query builder for Diagnosis.
func (c *DiagnosisClient) Query() *DiagnosisQuery {
	return &DiagnosisQuery{config: c.config}
}

// Get returns a Diagnosis entity by its id.
func (c *DiagnosisClient) Get(ctx context.Context, id int) (*Diagnosis, error) {
	return c.Query().Where(diagnosis.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiagnosisClient) GetX(ctx context.Context, id int) *Diagnosis {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDisease queries the disease edge of a Diagnosis.
func (c *DiagnosisClient) QueryDisease(d *Diagnosis) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.DiseaseTable, diagnosis.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Diagnosis.
func (c *DiagnosisClient) QueryPatient(d *Diagnosis) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.PatientTable, diagnosis.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Diagnosis.
func (c *DiagnosisClient) QueryEmployee(d *Diagnosis) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.EmployeeTable, diagnosis.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiagnosisClient) Hooks() []Hook {
	return c.hooks.Diagnosis
}

// DiseaseClient is a client for the Disease schema.
type DiseaseClient struct {
	config
}

// NewDiseaseClient returns a client for the Disease from the given config.
func NewDiseaseClient(c config) *DiseaseClient {
	return &DiseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disease.Hooks(f(g(h())))`.
func (c *DiseaseClient) Use(hooks ...Hook) {
	c.hooks.Disease = append(c.hooks.Disease, hooks...)
}

// Create returns a create builder for Disease.
func (c *DiseaseClient) Create() *DiseaseCreate {
	mutation := newDiseaseMutation(c.config, OpCreate)
	return &DiseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Disease.
func (c *DiseaseClient) Update() *DiseaseUpdate {
	mutation := newDiseaseMutation(c.config, OpUpdate)
	return &DiseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiseaseClient) UpdateOne(d *Disease) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDisease(d))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiseaseClient) UpdateOneID(id int) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDiseaseID(id))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disease.
func (c *DiseaseClient) Delete() *DiseaseDelete {
	mutation := newDiseaseMutation(c.config, OpDelete)
	return &DiseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiseaseClient) DeleteOne(d *Disease) *DiseaseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiseaseClient) DeleteOneID(id int) *DiseaseDeleteOne {
	builder := c.Delete().Where(disease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiseaseDeleteOne{builder}
}

// Create returns a query builder for Disease.
func (c *DiseaseClient) Query() *DiseaseQuery {
	return &DiseaseQuery{config: c.config}
}

// Get returns a Disease entity by its id.
func (c *DiseaseClient) Get(ctx context.Context, id int) (*Disease, error) {
	return c.Query().Where(disease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiseaseClient) GetX(ctx context.Context, id int) *Disease {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryEmployee queries the employee edge of a Disease.
func (c *DiseaseClient) QueryEmployee(d *Disease) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, disease.EmployeeTable, disease.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeverity queries the severity edge of a Disease.
func (c *DiseaseClient) QuerySeverity(d *Disease) *SeverityQuery {
	query := &SeverityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(severity.Table, severity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, disease.SeverityTable, disease.SeverityColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiseasetype queries the diseasetype edge of a Disease.
func (c *DiseaseClient) QueryDiseasetype(d *Disease) *DiseasetypeQuery {
	query := &DiseasetypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(diseasetype.Table, diseasetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, disease.DiseasetypeTable, disease.DiseasetypeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArea queries the area edge of a Disease.
func (c *DiseaseClient) QueryArea(d *Disease) *AreaQuery {
	query := &AreaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disease.AreaTable, disease.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrug queries the drug edge of a Disease.
func (c *DiseaseClient) QueryDrug(d *Disease) *DrugQuery {
	query := &DrugQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(drug.Table, drug.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disease.DrugTable, disease.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiagnosis queries the diagnosis edge of a Disease.
func (c *DiseaseClient) QueryDiagnosis(d *Disease) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disease.DiagnosisTable, disease.DiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiseaseClient) Hooks() []Hook {
	return c.hooks.Disease
}

// DiseasetypeClient is a client for the Diseasetype schema.
type DiseasetypeClient struct {
	config
}

// NewDiseasetypeClient returns a client for the Diseasetype from the given config.
func NewDiseasetypeClient(c config) *DiseasetypeClient {
	return &DiseasetypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `diseasetype.Hooks(f(g(h())))`.
func (c *DiseasetypeClient) Use(hooks ...Hook) {
	c.hooks.Diseasetype = append(c.hooks.Diseasetype, hooks...)
}

// Create returns a create builder for Diseasetype.
func (c *DiseasetypeClient) Create() *DiseasetypeCreate {
	mutation := newDiseasetypeMutation(c.config, OpCreate)
	return &DiseasetypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Diseasetype.
func (c *DiseasetypeClient) Update() *DiseasetypeUpdate {
	mutation := newDiseasetypeMutation(c.config, OpUpdate)
	return &DiseasetypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiseasetypeClient) UpdateOne(d *Diseasetype) *DiseasetypeUpdateOne {
	mutation := newDiseasetypeMutation(c.config, OpUpdateOne, withDiseasetype(d))
	return &DiseasetypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiseasetypeClient) UpdateOneID(id int) *DiseasetypeUpdateOne {
	mutation := newDiseasetypeMutation(c.config, OpUpdateOne, withDiseasetypeID(id))
	return &DiseasetypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Diseasetype.
func (c *DiseasetypeClient) Delete() *DiseasetypeDelete {
	mutation := newDiseasetypeMutation(c.config, OpDelete)
	return &DiseasetypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiseasetypeClient) DeleteOne(d *Diseasetype) *DiseasetypeDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiseasetypeClient) DeleteOneID(id int) *DiseasetypeDeleteOne {
	builder := c.Delete().Where(diseasetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiseasetypeDeleteOne{builder}
}

// Create returns a query builder for Diseasetype.
func (c *DiseasetypeClient) Query() *DiseasetypeQuery {
	return &DiseasetypeQuery{config: c.config}
}

// Get returns a Diseasetype entity by its id.
func (c *DiseasetypeClient) Get(ctx context.Context, id int) (*Diseasetype, error) {
	return c.Query().Where(diseasetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiseasetypeClient) GetX(ctx context.Context, id int) *Diseasetype {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDisease queries the disease edge of a Diseasetype.
func (c *DiseasetypeClient) QueryDisease(d *Diseasetype) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diseasetype.Table, diseasetype.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, diseasetype.DiseaseTable, diseasetype.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiseasetypeClient) Hooks() []Hook {
	return c.hooks.Diseasetype
}

// DrugClient is a client for the Drug schema.
type DrugClient struct {
	config
}

// NewDrugClient returns a client for the Drug from the given config.
func NewDrugClient(c config) *DrugClient {
	return &DrugClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drug.Hooks(f(g(h())))`.
func (c *DrugClient) Use(hooks ...Hook) {
	c.hooks.Drug = append(c.hooks.Drug, hooks...)
}

// Create returns a create builder for Drug.
func (c *DrugClient) Create() *DrugCreate {
	mutation := newDrugMutation(c.config, OpCreate)
	return &DrugCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Drug.
func (c *DrugClient) Update() *DrugUpdate {
	mutation := newDrugMutation(c.config, OpUpdate)
	return &DrugUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugClient) UpdateOne(d *Drug) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrug(d))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugClient) UpdateOneID(id int) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrugID(id))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Drug.
func (c *DrugClient) Delete() *DrugDelete {
	mutation := newDrugMutation(c.config, OpDelete)
	return &DrugDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugClient) DeleteOne(d *Drug) *DrugDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugClient) DeleteOneID(id int) *DrugDeleteOne {
	builder := c.Delete().Where(drug.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugDeleteOne{builder}
}

// Create returns a query builder for Drug.
func (c *DrugClient) Query() *DrugQuery {
	return &DrugQuery{config: c.config}
}

// Get returns a Drug entity by its id.
func (c *DrugClient) Get(ctx context.Context, id int) (*Drug, error) {
	return c.Query().Where(drug.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugClient) GetX(ctx context.Context, id int) *Drug {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryEmployee queries the employee edge of a Drug.
func (c *DrugClient) QueryEmployee(d *Drug) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drug.Table, drug.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drug.EmployeeTable, drug.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrugtype queries the drugtype edge of a Drug.
func (c *DrugClient) QueryDrugtype(d *Drug) *DrugTypeQuery {
	query := &DrugTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drug.Table, drug.FieldID, id),
			sqlgraph.To(drugtype.Table, drugtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drug.DrugtypeTable, drug.DrugtypeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisease queries the disease edge of a Drug.
func (c *DrugClient) QueryDisease(d *Drug) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drug.Table, drug.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drug.DiseaseTable, drug.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugClient) Hooks() []Hook {
	return c.hooks.Drug
}

// DrugTypeClient is a client for the DrugType schema.
type DrugTypeClient struct {
	config
}

// NewDrugTypeClient returns a client for the DrugType from the given config.
func NewDrugTypeClient(c config) *DrugTypeClient {
	return &DrugTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drugtype.Hooks(f(g(h())))`.
func (c *DrugTypeClient) Use(hooks ...Hook) {
	c.hooks.DrugType = append(c.hooks.DrugType, hooks...)
}

// Create returns a create builder for DrugType.
func (c *DrugTypeClient) Create() *DrugTypeCreate {
	mutation := newDrugTypeMutation(c.config, OpCreate)
	return &DrugTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for DrugType.
func (c *DrugTypeClient) Update() *DrugTypeUpdate {
	mutation := newDrugTypeMutation(c.config, OpUpdate)
	return &DrugTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugTypeClient) UpdateOne(dt *DrugType) *DrugTypeUpdateOne {
	mutation := newDrugTypeMutation(c.config, OpUpdateOne, withDrugType(dt))
	return &DrugTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugTypeClient) UpdateOneID(id int) *DrugTypeUpdateOne {
	mutation := newDrugTypeMutation(c.config, OpUpdateOne, withDrugTypeID(id))
	return &DrugTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DrugType.
func (c *DrugTypeClient) Delete() *DrugTypeDelete {
	mutation := newDrugTypeMutation(c.config, OpDelete)
	return &DrugTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugTypeClient) DeleteOne(dt *DrugType) *DrugTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugTypeClient) DeleteOneID(id int) *DrugTypeDeleteOne {
	builder := c.Delete().Where(drugtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugTypeDeleteOne{builder}
}

// Create returns a query builder for DrugType.
func (c *DrugTypeClient) Query() *DrugTypeQuery {
	return &DrugTypeQuery{config: c.config}
}

// Get returns a DrugType entity by its id.
func (c *DrugTypeClient) Get(ctx context.Context, id int) (*DrugType, error) {
	return c.Query().Where(drugtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugTypeClient) GetX(ctx context.Context, id int) *DrugType {
	dt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return dt
}

// QueryDrug queries the drug edge of a DrugType.
func (c *DrugTypeClient) QueryDrug(dt *DrugType) *DrugQuery {
	query := &DrugQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugtype.Table, drugtype.FieldID, id),
			sqlgraph.To(drug.Table, drug.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, drugtype.DrugTable, drugtype.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugTypeClient) Hooks() []Hook {
	return c.hooks.DrugType
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryDepartment queries the department edge of a Employee.
func (c *EmployeeClient) QueryDepartment(e *Employee) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.DepartmentTable, employee.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlace queries the place edge of a Employee.
func (c *EmployeeClient) QueryPlace(e *Employee) *PlaceQuery {
	query := &PlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.PlaceTable, employee.PlaceColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNametitle queries the nametitle edge of a Employee.
func (c *EmployeeClient) QueryNametitle(e *Employee) *NametitleQuery {
	query := &NametitleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(nametitle.Table, nametitle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.NametitleTable, employee.NametitleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArea queries the area edge of a Employee.
func (c *EmployeeClient) QueryArea(e *Employee) *AreaQuery {
	query := &AreaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AreaTable, employee.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisease queries the disease edge of a Employee.
func (c *EmployeeClient) QueryDisease(e *Employee) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.DiseaseTable, employee.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrug queries the drug edge of a Employee.
func (c *EmployeeClient) QueryDrug(e *Employee) *DrugQuery {
	query := &DrugQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(drug.Table, drug.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.DrugTable, employee.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiagnosis queries the diagnosis edge of a Employee.
func (c *EmployeeClient) QueryDiagnosis(e *Employee) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.DiagnosisTable, employee.DiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Employee.
func (c *EmployeeClient) QueryPatient(e *Employee) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.PatientTable, employee.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Create returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	ge, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ge
}

// QueryPatient queries the patient edge of a Gender.
func (c *GenderClient) QueryPatient(ge *Gender) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gender.Table, gender.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gender.PatientTable, gender.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// LevelClient is a client for the Level schema.
type LevelClient struct {
	config
}

// NewLevelClient returns a client for the Level from the given config.
func NewLevelClient(c config) *LevelClient {
	return &LevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `level.Hooks(f(g(h())))`.
func (c *LevelClient) Use(hooks ...Hook) {
	c.hooks.Level = append(c.hooks.Level, hooks...)
}

// Create returns a create builder for Level.
func (c *LevelClient) Create() *LevelCreate {
	mutation := newLevelMutation(c.config, OpCreate)
	return &LevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Level.
func (c *LevelClient) Update() *LevelUpdate {
	mutation := newLevelMutation(c.config, OpUpdate)
	return &LevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LevelClient) UpdateOne(l *Level) *LevelUpdateOne {
	mutation := newLevelMutation(c.config, OpUpdateOne, withLevel(l))
	return &LevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LevelClient) UpdateOneID(id int) *LevelUpdateOne {
	mutation := newLevelMutation(c.config, OpUpdateOne, withLevelID(id))
	return &LevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Level.
func (c *LevelClient) Delete() *LevelDelete {
	mutation := newLevelMutation(c.config, OpDelete)
	return &LevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LevelClient) DeleteOne(l *Level) *LevelDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LevelClient) DeleteOneID(id int) *LevelDeleteOne {
	builder := c.Delete().Where(level.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LevelDeleteOne{builder}
}

// Create returns a query builder for Level.
func (c *LevelClient) Query() *LevelQuery {
	return &LevelQuery{config: c.config}
}

// Get returns a Level entity by its id.
func (c *LevelClient) Get(ctx context.Context, id int) (*Level, error) {
	return c.Query().Where(level.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LevelClient) GetX(ctx context.Context, id int) *Level {
	l, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return l
}

// QueryArea queries the area edge of a Level.
func (c *LevelClient) QueryArea(l *Level) *AreaQuery {
	query := &AreaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(level.Table, level.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, level.AreaTable, level.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LevelClient) Hooks() []Hook {
	return c.hooks.Level
}

// NametitleClient is a client for the Nametitle schema.
type NametitleClient struct {
	config
}

// NewNametitleClient returns a client for the Nametitle from the given config.
func NewNametitleClient(c config) *NametitleClient {
	return &NametitleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nametitle.Hooks(f(g(h())))`.
func (c *NametitleClient) Use(hooks ...Hook) {
	c.hooks.Nametitle = append(c.hooks.Nametitle, hooks...)
}

// Create returns a create builder for Nametitle.
func (c *NametitleClient) Create() *NametitleCreate {
	mutation := newNametitleMutation(c.config, OpCreate)
	return &NametitleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nametitle.
func (c *NametitleClient) Update() *NametitleUpdate {
	mutation := newNametitleMutation(c.config, OpUpdate)
	return &NametitleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NametitleClient) UpdateOne(n *Nametitle) *NametitleUpdateOne {
	mutation := newNametitleMutation(c.config, OpUpdateOne, withNametitle(n))
	return &NametitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NametitleClient) UpdateOneID(id int) *NametitleUpdateOne {
	mutation := newNametitleMutation(c.config, OpUpdateOne, withNametitleID(id))
	return &NametitleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nametitle.
func (c *NametitleClient) Delete() *NametitleDelete {
	mutation := newNametitleMutation(c.config, OpDelete)
	return &NametitleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NametitleClient) DeleteOne(n *Nametitle) *NametitleDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NametitleClient) DeleteOneID(id int) *NametitleDeleteOne {
	builder := c.Delete().Where(nametitle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NametitleDeleteOne{builder}
}

// Create returns a query builder for Nametitle.
func (c *NametitleClient) Query() *NametitleQuery {
	return &NametitleQuery{config: c.config}
}

// Get returns a Nametitle entity by its id.
func (c *NametitleClient) Get(ctx context.Context, id int) (*Nametitle, error) {
	return c.Query().Where(nametitle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NametitleClient) GetX(ctx context.Context, id int) *Nametitle {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryEmployee queries the employee edge of a Nametitle.
func (c *NametitleClient) QueryEmployee(n *Nametitle) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nametitle.Table, nametitle.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nametitle.EmployeeTable, nametitle.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Nametitle.
func (c *NametitleClient) QueryPatient(n *Nametitle) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nametitle.Table, nametitle.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nametitle.PatientTable, nametitle.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NametitleClient) Hooks() []Hook {
	return c.hooks.Nametitle
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryEmployee queries the employee edge of a Patient.
func (c *PatientClient) QueryEmployee(pa *Patient) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.EmployeeTable, patient.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a Patient.
func (c *PatientClient) QueryCategory(pa *Patient) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.CategoryTable, patient.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBloodtype queries the bloodtype edge of a Patient.
func (c *PatientClient) QueryBloodtype(pa *Patient) *BloodtypeQuery {
	query := &BloodtypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bloodtype.Table, bloodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.BloodtypeTable, patient.BloodtypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGender queries the gender edge of a Patient.
func (c *PatientClient) QueryGender(pa *Patient) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(gender.Table, gender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.GenderTable, patient.GenderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNametitle queries the nametitle edge of a Patient.
func (c *PatientClient) QueryNametitle(pa *Patient) *NametitleQuery {
	query := &NametitleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(nametitle.Table, nametitle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.NametitleTable, patient.NametitleColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiagnosis queries the diagnosis edge of a Patient.
func (c *PatientClient) QueryDiagnosis(pa *Patient) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.DiagnosisTable, patient.DiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PlaceClient is a client for the Place schema.
type PlaceClient struct {
	config
}

// NewPlaceClient returns a client for the Place from the given config.
func NewPlaceClient(c config) *PlaceClient {
	return &PlaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `place.Hooks(f(g(h())))`.
func (c *PlaceClient) Use(hooks ...Hook) {
	c.hooks.Place = append(c.hooks.Place, hooks...)
}

// Create returns a create builder for Place.
func (c *PlaceClient) Create() *PlaceCreate {
	mutation := newPlaceMutation(c.config, OpCreate)
	return &PlaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Place.
func (c *PlaceClient) Update() *PlaceUpdate {
	mutation := newPlaceMutation(c.config, OpUpdate)
	return &PlaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaceClient) UpdateOne(pl *Place) *PlaceUpdateOne {
	mutation := newPlaceMutation(c.config, OpUpdateOne, withPlace(pl))
	return &PlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaceClient) UpdateOneID(id int) *PlaceUpdateOne {
	mutation := newPlaceMutation(c.config, OpUpdateOne, withPlaceID(id))
	return &PlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Place.
func (c *PlaceClient) Delete() *PlaceDelete {
	mutation := newPlaceMutation(c.config, OpDelete)
	return &PlaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlaceClient) DeleteOne(pl *Place) *PlaceDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlaceClient) DeleteOneID(id int) *PlaceDeleteOne {
	builder := c.Delete().Where(place.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaceDeleteOne{builder}
}

// Create returns a query builder for Place.
func (c *PlaceClient) Query() *PlaceQuery {
	return &PlaceQuery{config: c.config}
}

// Get returns a Place entity by its id.
func (c *PlaceClient) Get(ctx context.Context, id int) (*Place, error) {
	return c.Query().Where(place.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaceClient) GetX(ctx context.Context, id int) *Place {
	pl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pl
}

// QueryEmployee queries the employee edge of a Place.
func (c *PlaceClient) QueryEmployee(pl *Place) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.EmployeeTable, place.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaceClient) Hooks() []Hook {
	return c.hooks.Place
}

// SeverityClient is a client for the Severity schema.
type SeverityClient struct {
	config
}

// NewSeverityClient returns a client for the Severity from the given config.
func NewSeverityClient(c config) *SeverityClient {
	return &SeverityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `severity.Hooks(f(g(h())))`.
func (c *SeverityClient) Use(hooks ...Hook) {
	c.hooks.Severity = append(c.hooks.Severity, hooks...)
}

// Create returns a create builder for Severity.
func (c *SeverityClient) Create() *SeverityCreate {
	mutation := newSeverityMutation(c.config, OpCreate)
	return &SeverityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Severity.
func (c *SeverityClient) Update() *SeverityUpdate {
	mutation := newSeverityMutation(c.config, OpUpdate)
	return &SeverityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeverityClient) UpdateOne(s *Severity) *SeverityUpdateOne {
	mutation := newSeverityMutation(c.config, OpUpdateOne, withSeverity(s))
	return &SeverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeverityClient) UpdateOneID(id int) *SeverityUpdateOne {
	mutation := newSeverityMutation(c.config, OpUpdateOne, withSeverityID(id))
	return &SeverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Severity.
func (c *SeverityClient) Delete() *SeverityDelete {
	mutation := newSeverityMutation(c.config, OpDelete)
	return &SeverityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SeverityClient) DeleteOne(s *Severity) *SeverityDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SeverityClient) DeleteOneID(id int) *SeverityDeleteOne {
	builder := c.Delete().Where(severity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeverityDeleteOne{builder}
}

// Create returns a query builder for Severity.
func (c *SeverityClient) Query() *SeverityQuery {
	return &SeverityQuery{config: c.config}
}

// Get returns a Severity entity by its id.
func (c *SeverityClient) Get(ctx context.Context, id int) (*Severity, error) {
	return c.Query().Where(severity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeverityClient) GetX(ctx context.Context, id int) *Severity {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryDisease queries the disease edge of a Severity.
func (c *SeverityClient) QueryDisease(s *Severity) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(severity.Table, severity.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, severity.DiseaseTable, severity.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeverityClient) Hooks() []Hook {
	return c.hooks.Severity
}

// StatisticClient is a client for the Statistic schema.
type StatisticClient struct {
	config
}

// NewStatisticClient returns a client for the Statistic from the given config.
func NewStatisticClient(c config) *StatisticClient {
	return &StatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statistic.Hooks(f(g(h())))`.
func (c *StatisticClient) Use(hooks ...Hook) {
	c.hooks.Statistic = append(c.hooks.Statistic, hooks...)
}

// Create returns a create builder for Statistic.
func (c *StatisticClient) Create() *StatisticCreate {
	mutation := newStatisticMutation(c.config, OpCreate)
	return &StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Statistic.
func (c *StatisticClient) Update() *StatisticUpdate {
	mutation := newStatisticMutation(c.config, OpUpdate)
	return &StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatisticClient) UpdateOne(s *Statistic) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatistic(s))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatisticClient) UpdateOneID(id int) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatisticID(id))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statistic.
func (c *StatisticClient) Delete() *StatisticDelete {
	mutation := newStatisticMutation(c.config, OpDelete)
	return &StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatisticClient) DeleteOne(s *Statistic) *StatisticDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatisticClient) DeleteOneID(id int) *StatisticDeleteOne {
	builder := c.Delete().Where(statistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatisticDeleteOne{builder}
}

// Create returns a query builder for Statistic.
func (c *StatisticClient) Query() *StatisticQuery {
	return &StatisticQuery{config: c.config}
}

// Get returns a Statistic entity by its id.
func (c *StatisticClient) Get(ctx context.Context, id int) (*Statistic, error) {
	return c.Query().Where(statistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatisticClient) GetX(ctx context.Context, id int) *Statistic {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryArea queries the area edge of a Statistic.
func (c *StatisticClient) QueryArea(s *Statistic) *AreaQuery {
	query := &AreaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statistic.AreaTable, statistic.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatisticClient) Hooks() []Hook {
	return c.hooks.Statistic
}
