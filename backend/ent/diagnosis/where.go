// Code generated by entc, DO NOT EDIT.

package diagnosis

import (
	"time"

	"github.com/B6001186/Contagions/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DiagnosticMessages applies equality check predicate on the "DiagnosticMessages" field. It's identical to DiagnosticMessagesEQ.
func DiagnosticMessages(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnosticMessages), v))
	})
}

// SurveillancePeriod applies equality check predicate on the "SurveillancePeriod" field. It's identical to SurveillancePeriodEQ.
func SurveillancePeriod(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurveillancePeriod), v))
	})
}

// DiagnosisDate applies equality check predicate on the "DiagnosisDate" field. It's identical to DiagnosisDateEQ.
func DiagnosisDate(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosticMessagesEQ applies the EQ predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesEQ(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesNEQ applies the NEQ predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesNEQ(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesIn applies the In predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesIn(vs ...string) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagnosticMessages), v...))
	})
}

// DiagnosticMessagesNotIn applies the NotIn predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesNotIn(vs ...string) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagnosticMessages), v...))
	})
}

// DiagnosticMessagesGT applies the GT predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesGT(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesGTE applies the GTE predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesGTE(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesLT applies the LT predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesLT(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesLTE applies the LTE predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesLTE(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesContains applies the Contains predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesContains(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesHasPrefix applies the HasPrefix predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesHasPrefix(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesHasSuffix applies the HasSuffix predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesHasSuffix(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesEqualFold applies the EqualFold predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesEqualFold(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiagnosticMessages), v))
	})
}

// DiagnosticMessagesContainsFold applies the ContainsFold predicate on the "DiagnosticMessages" field.
func DiagnosticMessagesContainsFold(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiagnosticMessages), v))
	})
}

// SurveillancePeriodEQ applies the EQ predicate on the "SurveillancePeriod" field.
func SurveillancePeriodEQ(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodNEQ applies the NEQ predicate on the "SurveillancePeriod" field.
func SurveillancePeriodNEQ(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodIn applies the In predicate on the "SurveillancePeriod" field.
func SurveillancePeriodIn(vs ...string) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSurveillancePeriod), v...))
	})
}

// SurveillancePeriodNotIn applies the NotIn predicate on the "SurveillancePeriod" field.
func SurveillancePeriodNotIn(vs ...string) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSurveillancePeriod), v...))
	})
}

// SurveillancePeriodGT applies the GT predicate on the "SurveillancePeriod" field.
func SurveillancePeriodGT(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodGTE applies the GTE predicate on the "SurveillancePeriod" field.
func SurveillancePeriodGTE(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodLT applies the LT predicate on the "SurveillancePeriod" field.
func SurveillancePeriodLT(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodLTE applies the LTE predicate on the "SurveillancePeriod" field.
func SurveillancePeriodLTE(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodContains applies the Contains predicate on the "SurveillancePeriod" field.
func SurveillancePeriodContains(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodHasPrefix applies the HasPrefix predicate on the "SurveillancePeriod" field.
func SurveillancePeriodHasPrefix(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodHasSuffix applies the HasSuffix predicate on the "SurveillancePeriod" field.
func SurveillancePeriodHasSuffix(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodEqualFold applies the EqualFold predicate on the "SurveillancePeriod" field.
func SurveillancePeriodEqualFold(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSurveillancePeriod), v))
	})
}

// SurveillancePeriodContainsFold applies the ContainsFold predicate on the "SurveillancePeriod" field.
func SurveillancePeriodContainsFold(v string) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSurveillancePeriod), v))
	})
}

// DiagnosisDateEQ applies the EQ predicate on the "DiagnosisDate" field.
func DiagnosisDateEQ(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosisDateNEQ applies the NEQ predicate on the "DiagnosisDate" field.
func DiagnosisDateNEQ(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosisDateIn applies the In predicate on the "DiagnosisDate" field.
func DiagnosisDateIn(vs ...time.Time) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagnosisDate), v...))
	})
}

// DiagnosisDateNotIn applies the NotIn predicate on the "DiagnosisDate" field.
func DiagnosisDateNotIn(vs ...time.Time) predicate.Diagnosis {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnosis(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagnosisDate), v...))
	})
}

// DiagnosisDateGT applies the GT predicate on the "DiagnosisDate" field.
func DiagnosisDateGT(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosisDateGTE applies the GTE predicate on the "DiagnosisDate" field.
func DiagnosisDateGTE(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosisDateLT applies the LT predicate on the "DiagnosisDate" field.
func DiagnosisDateLT(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagnosisDate), v))
	})
}

// DiagnosisDateLTE applies the LTE predicate on the "DiagnosisDate" field.
func DiagnosisDateLTE(v time.Time) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagnosisDate), v))
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Diagnosis) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Diagnosis) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Diagnosis) predicate.Diagnosis {
	return predicate.Diagnosis(func(s *sql.Selector) {
		p(s.Not())
	})
}
