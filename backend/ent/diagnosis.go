// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Diagnosis is the model entity for the Diagnosis schema.
type Diagnosis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiagnosticMessages holds the value of the "DiagnosticMessages" field.
	DiagnosticMessages string `json:"DiagnosticMessages,omitempty"`
	// SurveillancePeriod holds the value of the "SurveillancePeriod" field.
	SurveillancePeriod string `json:"SurveillancePeriod,omitempty"`
	// Treatment holds the value of the "Treatment" field.
	Treatment string `json:"Treatment,omitempty"`
	// DiagnosisDate holds the value of the "DiagnosisDate" field.
	DiagnosisDate time.Time `json:"DiagnosisDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiagnosisQuery when eager-loading is set.
	Edges              DiagnosisEdges `json:"edges"`
	disease_diagnosis  *int
	employee_diagnosis *int
	patient_diagnosis  *int
}

// DiagnosisEdges holds the relations/edges for other nodes in the graph.
type DiagnosisEdges struct {
	// Disease holds the value of the disease edge.
	Disease *Disease
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Employee holds the value of the employee edge.
	Employee *Employee
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnosisEdges) DiseaseOrErr() (*Disease, error) {
	if e.loadedTypes[0] {
		if e.Disease == nil {
			// The edge disease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnosisEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiagnosisEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[2] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Diagnosis) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // DiagnosticMessages
		&sql.NullString{}, // SurveillancePeriod
		&sql.NullString{}, // Treatment
		&sql.NullTime{},   // DiagnosisDate
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Diagnosis) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // disease_diagnosis
		&sql.NullInt64{}, // employee_diagnosis
		&sql.NullInt64{}, // patient_diagnosis
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Diagnosis fields.
func (d *Diagnosis) assignValues(values ...interface{}) error {
	if m, n := len(values), len(diagnosis.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field DiagnosticMessages", values[0])
	} else if value.Valid {
		d.DiagnosticMessages = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field SurveillancePeriod", values[1])
	} else if value.Valid {
		d.SurveillancePeriod = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Treatment", values[2])
	} else if value.Valid {
		d.Treatment = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field DiagnosisDate", values[3])
	} else if value.Valid {
		d.DiagnosisDate = value.Time
	}
	values = values[4:]
	if len(values) == len(diagnosis.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disease_diagnosis", value)
		} else if value.Valid {
			d.disease_diagnosis = new(int)
			*d.disease_diagnosis = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_diagnosis", value)
		} else if value.Valid {
			d.employee_diagnosis = new(int)
			*d.employee_diagnosis = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_diagnosis", value)
		} else if value.Valid {
			d.patient_diagnosis = new(int)
			*d.patient_diagnosis = int(value.Int64)
		}
	}
	return nil
}

// QueryDisease queries the disease edge of the Diagnosis.
func (d *Diagnosis) QueryDisease() *DiseaseQuery {
	return (&DiagnosisClient{config: d.config}).QueryDisease(d)
}

// QueryPatient queries the patient edge of the Diagnosis.
func (d *Diagnosis) QueryPatient() *PatientQuery {
	return (&DiagnosisClient{config: d.config}).QueryPatient(d)
}

// QueryEmployee queries the employee edge of the Diagnosis.
func (d *Diagnosis) QueryEmployee() *EmployeeQuery {
	return (&DiagnosisClient{config: d.config}).QueryEmployee(d)
}

// Update returns a builder for updating this Diagnosis.
// Note that, you need to call Diagnosis.Unwrap() before calling this method, if this Diagnosis
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Diagnosis) Update() *DiagnosisUpdateOne {
	return (&DiagnosisClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Diagnosis) Unwrap() *Diagnosis {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Diagnosis is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Diagnosis) String() string {
	var builder strings.Builder
	builder.WriteString("Diagnosis(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", DiagnosticMessages=")
	builder.WriteString(d.DiagnosticMessages)
	builder.WriteString(", SurveillancePeriod=")
	builder.WriteString(d.SurveillancePeriod)
	builder.WriteString(", Treatment=")
	builder.WriteString(d.Treatment)
	builder.WriteString(", DiagnosisDate=")
	builder.WriteString(d.DiagnosisDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Diagnoses is a parsable slice of Diagnosis.
type Diagnoses []*Diagnosis

func (d Diagnoses) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
